version: '3.9'

services:
  db:
    image: postgres:13.8-bullseye
    hostname: myfi_backend-db
    environment:
      POSTGRES_PASSWORD: "myfi_backend"
      POSTGRES_USER: "myfi_backend"
      POSTGRES_DB: "myfi_backend"
    volumes:
      - myfi_backend-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U myfi_backend
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: bitnami/redis:6.2.5
    hostname: "myfi_backend-redis"
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 10s
      retries: 5

  zookeeper:
    image: "zookeeper:latest"
    hostname: "myfi_backend-zookeeper"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOO_LOG_LEVEL: "ERROR"
    healthcheck:
      test: zkServer.sh status
      interval: 10s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: "myfi_backend-kafka"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "myfi_backend-zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://myfi_backend-kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--list",
          "--zookeeper",
          "myfi_backend-zookeeper:2181"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy

  migrator:
    image: myfi_backend:${MYFI_BACKEND_VERSION:-latest}
    restart: "no"
    command: alembic upgrade head
    environment:
      MYFI_BACKEND_DB_HOST: myfi_backend-db
      MYFI_BACKEND_DB_PORT: 5432
      MYFI_BACKEND_DB_USER: myfi_backend
      MYFI_BACKEND_DB_PASS: myfi_backend
      MYFI_BACKEND_DB_BASE: myfi_backend
    depends_on:
      db:
        condition: service_healthy

  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
      target: prod
    image: myfi_backend:${MYFI_BACKEND_VERSION:-latest}
    restart: always
    env_file:
      - .env
    ports:
      - ${MYFI_BACKEND_PORT:-8000}:8000
    labels:
      # Enables traefik for this container.
      - traefik.enable=true
      - traefik.http.routers.myfi_backend.rule=Host(`${MYFI_BACKEND_TRAEFIK_HOST:-myfi_backend.localhost}`)
      - traefik.http.routers.myfi_backend.entrypoints=http
      - traefik.http.routers.myfi_backend.service=myfi_backend
      - traefik.http.services.myfi_backend.loadbalancer.server.port=${MYFI_BACKEND_PORT:-8000}
    networks:
      - default
      - traefik-shared
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      MYFI_BACKEND_HOST: 0.0.0.0
      MYFI_BACKEND_DB_HOST: myfi_backend-db
      MYFI_BACKEND_DB_PORT: 5432
      MYFI_BACKEND_DB_USER: myfi_backend
      MYFI_BACKEND_DB_PASS: myfi_backend
      MYFI_BACKEND_DB_BASE: myfi_backend
      MYFI_BACKEND_REDIS_HOST: myfi_backend-redis
      TESTKAFKA_KAFKA_BOOTSTRAP_SERVERS: '["myfi_backend-kafka:9092"]'

volumes:
  myfi_backend-db-data:
    name: myfi_backend-db-data

networks:
  # Network for traefik.
  traefik-shared:
    name: traefik-shared
